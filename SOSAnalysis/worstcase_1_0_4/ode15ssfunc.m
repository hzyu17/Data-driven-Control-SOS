function [tOutput,x,y] = ode15ssfunc(mySystem,tSpan,x0,solverOptions,inputSignal)
% ODE45SFUNC  Run ODE15S on a s-function system and calculate outputs.
%
%   [T,X,Y] = ODE15SSFUNC(SYS,TSPAN,X0,SOLVEROPTIONS,INPUT)  Simulates the system
%   SYS over the time interval TSPAN from initial conditions X0.  The input
%   signal INPUT = [tInput,uvec] is linearly interpolated between the discrete
%   values of tInput to find the input at arbitary points in time.  The output 
%   arguments are the resulting times T, states X, and outputs Y of the
%   system.  SOLVEROPTIONS is a struct array generated by the commande
%   ODEST.
%
%   See also ODESET, ODE15S.

%% Define S-funciton flags
derivativesFlag = 1;
ouputsFlag = 3;

%% Get system sizes
[nStates,nInputs,nOutputs] = wcgetsizes(mySystem);

%% Handle optional input arguments
% Initial conditions
if nargin > 2
    if length(x0) ~= nStates
        error('Initial state vector has wrong number of states.')
    end
else
    x0 = zeros(nStates,1);
end

% ODE solver options
if nargin > 3
    % Verify solverOptions structure
    isValidOptions = isstruct(solverOptions) &&...
                     length(fields(solverOptions)) == 22;
    if ~isValidOptions
        if isempty(solverOptions)
            solverOptions = odeset;
        else
            error('Invalid ODE solver options.')
        end
    end
else
    solverOptions = odeset;
end

% Input signal
if nargin > 4
    tInput = inputSignal(:,1);
    u = inputSignal(:,2:end);
else
    % No input
    tInput = tSpan;
    u = zeros(length(tInput),1);
end

%% Simulate the system
[tOutput,x] = ode15s(@NESTED_SDRIVER,tSpan,x0,solverOptions);
    % Nested function used by ode45 to 'drive' the s-function
    function dx = NESTED_SDRIVER(t,thisX)
        thisU = locate(t,tInput,u);
        dx = feval(mySystem,t,thisX,thisU(:),1);
    end

%% Use s-function to calculate the output
y = zeros(nOutputs,length(tOutput));
for i = 1:length(tOutput)
    thisU = locate(tOutput(i),tInput,u);
    thisY = feval(mySystem,tOutput(i),x(i,1:nStates)',thisU',3);
    y(1:nOutputs,i) = thisY;
end

%% Transpose y into standard "ode15s" format
y = y';

end  % Must end outer function when nesting