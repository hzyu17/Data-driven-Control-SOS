function W = pvset(W,property,value)

switch lower(property)
    
    case 'finalcostmatrix'
        W.FinalCostMatrix = value;
    
    case 'initialinput'
        if ischar(value)
            switch lower(value)
                case 'ones'
                    W.InitialInput = 'ones';
                case 'rand'
                    W.InitialInput = 'rand';
                case 'randn'
                    W.InitialInput = 'randn';
                otherwise
                    error('Not a valid input type')
            end
        elseif isnumeric(value)  &&  ndims(value) == 2
            W.InitialInput = value;
        else
            error('InitialInput must be an 2D array or a string')
        end
        
    case 'maxiter'
        if isscalar(value) && value > 0
            W.MaxIter = ceil(value);
        else
            error('MaxIter must be a positive scalar')
        end
        
    case 'objective'
        availObjectives = {'L2','LInfinity','Final'};
        if ischar(value)
            matches = strncmpi(value,availObjectives,2);
            if sum(matches) == 1
                objective = availObjectives{matches};
                W.Objective = objective;
            elseif sum(matches) > 1
                error('Ambiguous objective.  Try using complete objective name.')
            else
                error('Not a valid objective')
            end
        else
            error('Objective must be a string')
        end
        
    case 'odeoptions'
        if isstruct(value) && length(fields(value)) == 22
            W.ODEOptions = value;
        else
            error('ODEOptions must be a struct in the format generated by ODESET.')
        end
        
    case 'odesolver'
        if ischar(value) && (isequal(value,'ode45') || isequal(value,'ode15s'))
            W.ODESolver = value;
        elseif isequal(value,@ode45)
            W.ODESolver = 'ode45';
        elseif isequal(value,@ode15s)
            W.ODESolver = 'ode15s';
        else
            error('ODESolver must be a string (''ode45'' or ''ode15s'').')
        end
        
    case 'partialsfunc'
        if isa(value,'function_handle')
            W.PartialsFunc = value;
        elseif ischar(value)
            fHandle = str2func(value);
            funcInfo = functions(fHandle);
            splitFilename = regexpi(funcInfo.file,'\w*','match');
            if isempty(splitFilename)
                extension = '';
            else
                extension = lower(splitFilename{end});
            end
            
            if isequal(extension,'m')
                W.PartialsFunc = fHandle;
            else
                error(['The file ',func2str(fHandle),' is not a valid m-file'])
            end
        elseif isempty(value)
            W.PartialsFunc = [];
        else
            error('PartialsFunc must be a function handle or a string corresponding to the name of an m-file.')
        end

    case 'perturbationsize'
        if isscalar(value) && value > 0
            W.PerturbationSize = value;
        else
            error('PerturbationSize must be a positive scalar.')
        end

    case 'plotprogress'
      if ischar(value) && ismember( lower(value), {'none','text','plot'} )
        W.PlotProgress = lower(value);
      else
        error('The value of PlotProgress must be ''none'', ''text'', or ''plot''.')
      end

    case 'inputl2norm'
        if isscalar(value)  &&  value > 0
            W.InputL2Norm = value;
        else
            error('InputL2Norm must be a positive scalar')
        end

    case 'tol'
        if isscalar(value) && value > 0
            W.Tol = value;
        else
            error('Tol must be a positive scalar')
        end

    case 'uncertainparamrange'
        if isnumeric(value) && ndims(value) == 2
            if size(value,2) == 2
                % Make sure lower bound is on left
                iFlip = find(value(:,2) < value(:,1));
                value(iFlip,:) = fliplr(value(iFlip,:));
                W.UncertainParamRange = value;
            else
                error('Each row of UncertainParamRange must be a [min,max] pair.')
            end
        else
            error('UncertainParamRange must be a 2D numeric array.')
        end

    
    otherwise
        error('Invalid property name')
end
