function [tOutput,x,y] = ode45sfunc(mySystem,tSpan,x0,solverOptions,inputSignal)
% ODE45SFUNC  Run ODE45 on a s-function system and calculate outputs.
%
%   [T,X,Y] = ODE45SFUNC(SYS,TSPAN,X0,SOLVEROPTIONS,INPUT)  Simulates the 
%   system SYS over the time interval TSPAN from initial conditions X0.  
%   The input signal INPUT = [tInput,uvec] is linearly interpolated between
%   the discrete values of tInput to find the input at arbitary points in 
%   time.  The output arguments are the resulting times T, states X, and 
%   outputs Y of the system.  SOLVEROPTIONS is a struct array generated by 
%   the command ODESET.
%
%   See also ODESET, ODE45.

%% Define S-function flags
derivativesFlag = 1;
outputsFlag = 3;

%% Get system sizes
[nStates,nInputs,nOutputs] = wcgetsizes(mySystem);

%% Handle optional input arguments
% Initial conditions
if nargin > 2
    if length(x0) ~= nStates
        error('Initial state vector has wrong number of states.')
    end
else
    x0 = zeros(nStates,1);
end

% ODE solver options
if nargin > 3

    % Verify solverOptions structure
    isValidOptions = isstruct(solverOptions) &&...
                     length(fields(solverOptions)) == length(fields(odeset));
    if ~isValidOptions
        if isempty(solverOptions)
            solverOptions = odeset;
        else
            error('Invalid ODE solver options.')
        end
    end
else
    solverOptions = odeset;
end

% Input signal
if nargin > 4
    tInput = inputSignal(:,1);
    u = inputSignal(:,2:end);
else
    % No input
    u = zeros(length(tSpan),1);
    tInput = tSpan;
end

%% Simulate the system
[tOutput,x] = ode45(@nested_sfuncDriver,tSpan,x0,solverOptions);
    % Nested function used by ode45 to 'drive' the s-function
    function dx = nested_sfuncDriver(t,thisX)
        thisU = locate(t,tInput,u);
        dx = feval(mySystem,t,thisX,thisU(:),derivativesFlag);
    end

%% Use s-function to calculate the output
y = zeros(nOutputs,length(tOutput));
for i = 1:length(tOutput)
    thisU = locate(tOutput(i),tInput,u);
    thisY = feval(mySystem,tOutput(i),x(i,1:nStates)',thisU',outputsFlag);
    y(1:nOutputs,i) = thisY;
end

%% Transpose y into standard "ode45" format
y = y';

end  % Must end outer function when nesting