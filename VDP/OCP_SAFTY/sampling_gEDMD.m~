function gEDMD_filename = sampling_gEDMD(d)

%% Notes and logs
% 01/12/2021 cellfun, matlabFunction is much more faster than subs() for
% symbolic substitutions
% 08/30/2021 add the data driven part into the whole picture

close all 
clear all

%%
load('polynomials_def')

% 3. Coefficients of x
c_x = poly2basis(var_poly.x', Psi);

%%
% ========================
% sampling gEDMD for X's and X_dot's
% ========================

u = 0; % input
t = 0; % created but not used 

for i = 1 : dim_m+1
    Xinit = -5.0 + 10.0 * rand(nx, 10000); % random initial points
    
    if i == 2
        u = 1;
    end
    
    % collecting for the u_i simulation
    Xinit_i = [];
    Yinit_i = [];
    
    %% gEDMD
    
    % Generate basis Psi and its time derivative expression
%     Psi_sym = p2s(Psi);
    grad_Psi = jacobian(Psi_sym);
    model_dyn = model_dynamics_VDP(t, var_sym.x, u);
    Psi_dt = grad_Psi * model_dyn;    
    
    % Get initial data Psi(x0)
    data_cell = mat2cell(Xinit, size(Xinit, 1), ones(1, size(Xinit, 2)));
    
    MFun_Psi = matlabFunction(Psi_sym, 'Vars', {var_sym.x});
    Xi = cell2mat(cellfun(MFun_Psi, data_cell, 'UniformOutput', 0));
    
    % Get derivative data on the basis dPsi(x0)
    
    % Important! Use matlabFunction and cellfun to evaluate large
    % scales of data is much more efficient than subs!
    MFun_Psi_dt = matlabFunction(Psi_dt, 'Vars', {var_sym.x});
    dXi =  cell2mat(cellfun(MFun_Psi_dt, data_cell, 'UniformOutput', 0));
    
    % approximation
    M_i = size(Xi, 2);
    A = 1/M_i * dXi * Xi';
    B = 1/M_i * Xi * Xi';
    Li = A * pinv(B);
    figure;
    spy(Li)
    title('Sparsity visualization of the approximated infinitesimal matrix L')
    
    if i==1
        X = Xi;
        Y = dXi;
        L = Li;
    else
        X = {X,Xi};
        Y = {Y,dXi};
        L = {L, Li};
    end

end
%%
formatOut = 'mm_dd_yy_hh_MM_SS';
ch_date = datestr(now,formatOut);
ch_file = ['sampling_data/gEDMD_res_', ch_date,'.mat'];
save(ch_file)